// Command graphshow opens a browser and displays the input dot file. Graphviz
// must be installed.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"

	"github.com/rfratto/gragent/internal/dag/graphviz"
)

func main() {
	if err := run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func run() error {
	var (
		httpAddr = ":6060"
	)

	fs := flag.NewFlagSet("graphshow", flag.ExitOnError)
	fs.Usage = func() {
		fmt.Fprintf(fs.Output(), "usage: %s [flags] [file]\n", os.Args[0])

		fmt.Fprintln(
			fs.Output(),
			"graphshow opens a web browser that renders the Graphviz DOT-language input "+
				"file. Graphviz must be installed for this to work. The input file will be "+
				"re-read every time the page is loaded, making it unnecessary to re-run the "+
				"graphshow program more than once.",
		)

		fmt.Fprintf(fs.Output(), "Flags:\n")
		fs.PrintDefaults()
	}

	fs.StringVar(&httpAddr, "http", httpAddr, "http address to listen on")

	if err := fs.Parse(os.Args[1:]); err != nil {
		return err
	}

	switch {
	case len(fs.Args()) == 0:
		return fmt.Errorf("missing file name argument")
	case len(fs.Args()) > 1:
		return fmt.Errorf("only one file name may be provided")
	}

	fileName := fs.Arg(0)

	log.Printf("Serving graphviz for %s on %s", fileName, httpAddr)

	go func() {
		url := fmt.Sprintf("http://%s", httpAddr)

		// Give server a little time to get ready.
		time.Sleep(time.Millisecond * 500)

		for _, b := range browsers() {
			args := strings.Split(b, " ")
			if len(args) == 0 {
				continue
			}

			viewer := exec.Command(args[0], append(args[1:], url)...)
			viewer.Stderr = os.Stderr
			if err := viewer.Start(); err == nil {
				return
			}
		}

		// No visualizer succeeded, so just print URL.
		fmt.Printf("Navigate a browser to %s to view the graph\n", url)
	}()

	http.ListenAndServe(httpAddr, http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
		contents, err := os.ReadFile(fileName)
		if err != nil {
			log.Println("Could not load file:", err)
			http.Error(w, err.Error(), http.StatusNotFound)
			return
		}

		svgBytes, err := graphviz.Dot(contents, "svg")
		if err != nil {
			log.Println("Failed to render graph:", err)
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		io.Copy(w, bytes.NewReader(svgBytes))
	}))
	return nil
}

// browsers returns a list of commands to attempt for web visualization.
// Copied from Go at cmd/vendor/github.com/google/pprof/internal/driver/webui.go.
func browsers() []string {
	var cmds []string
	if userBrowser := os.Getenv("BROWSER"); userBrowser != "" {
		cmds = append(cmds, userBrowser)
	}
	switch runtime.GOOS {
	case "darwin":
		cmds = append(cmds, "/usr/bin/open")
	case "windows":
		cmds = append(cmds, "cmd /c start")
	default:
		// Commands opening browsers are prioritized over xdg-open, so browser()
		// command can be used on linux to open the .svg file generated by the -web
		// command (the .svg file includes embedded javascript so is best viewed in
		// a browser).
		cmds = append(cmds, []string{"chrome", "google-chrome", "chromium", "firefox", "sensible-browser"}...)
		if os.Getenv("DISPLAY") != "" {
			// xdg-open is only for use in a desktop environment.
			cmds = append(cmds, "xdg-open")
		}
	}
	return cmds
}
